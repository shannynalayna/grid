# Copyright 2017 Intel Corporation
# Copyright 2019 Bitwise IO, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -----------------------------------------------------------------------------

openapi: 3.0.0
info:
  version: 0.1.0
  title: Grid REST API
  description: _An API providing HTTP/JSON interface to Hyperledger Grid._
paths:
  /batches:
    post:
      tags:
        - Sawtooth Validator
      summary: Sends a BatchList to the Sawtooth Validator
      description: |
        Accepts a protobuf formatted `BatchList` as an octet-stream binary
        file and submits it to the validator to be committed.

        The API will return immediately with a status of `202`. There will be
        no `data` object, only a `link` to a `/batch_statuses` endpoint to be
        polled to check the status of submitted batches.
      operationId: post_batches
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: "#/components/schemas/BatchList"
        description: A binary encoded protobuf BatchList
        required: true
      responses:
        "202":
          description: Batches submitted for validation, but not yet committed
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/Link"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "429":
          $ref: "#/components/responses/429TooManyRequests"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /batch_statuses:
    get:
      tags:
        - Sawtooth Validator
      summary: Fetches the committed statuses for a set of batches from the Sawtooth
        Validator
      description: |
        Fetches an array of objects with a status and id for each batch
        requested. There are four possible statuses with string values
        `'COMMITTED'`, `'INVALID'`, `'PENDING'`, and `'UNKNOWN'`.

        The batch(es) you want to check can be specified using the `id` filter
        parameter. If a `wait` time is specified in the URL, the API will wait
        to respond until all batches are committed, or the time in seconds has
        elapsed. If the value of `wait` is not set (i.e., `?wait&id=...`), or
        it is set to any non-integer value other than `false`, the wait time
        will be just under the API's specified timeout (usually 300).

        Note that because this route does not return full resources, the
        response will not be paginated, and there will be no `head` or
        `paging` properties.
      operationId: get_batch_statuses_by_id
      parameters:
        - name: id
          in: query
          description: A comma-separated list of batch ids
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/wait"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/BatchStatuses"
                  link:
                    $ref: "#/components/schemas/Link"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /schema:
    get:
      tags:
        - Schema
      summary: Get a list of schemas
      description: Fetches a list of schemas from the reporting database
      operationId: get_schemas
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Schema"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "429":
          $ref: "#/components/responses/429TooManyRequests"
        "500":
          description: Something went wrong within the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "503":
          description: API is unable to reach the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/schema/{schema_name}":
    get:
      tags:
        - Schema
      summary: Find schema by schema name
      description: Returns a single schema
      operationId: get_schema_by_name
      parameters:
        - name: schema_name
          in: path
          description: Name of the schema to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/Schema"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "429":
          $ref: "#/components/responses/429TooManyRequests"
        "500":
          description: Something went wrong within the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "503":
          description: API is unable to reach the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /agent:
    get:
      tags:
        - Pike
      summary: Get a list of Agents
      description: Fetches a list of agents from the reporting database
      operationId: list_agents
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Agent"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "429":
          $ref: "#/components/responses/429TooManyRequests"
        "500":
          description: Something went wrong within the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "503":
          description: API is unable to reach the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /organization:
    get:
      tags:
        - Pike
      operationId: list_organizations
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "429":
          $ref: "#/components/responses/429TooManyRequests"
        "500":
          description: Something went wrong within the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "503":
          description: API is unable to reach the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/organization/{id}":
    get:
      tags:
        - Pike
      operationId: fetch_organization
      parameters:
        - name: id
          in: path
          description: Id of the organization to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "429":
          $ref: "#/components/responses/429TooManyRequests"
        "500":
          description: Something went wrong within the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "503":
          description: API is unable to reach the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/agent/{public_key}":
    get:
      tags:
        - Pike
      summary: Find agent by public key
      description: Returns a single agent from reporting database
      operationId: fetch_agent
      parameters:
        - name: public_key
          in: path
          description: Public key of the agent to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Agent"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "429":
          $ref: "#/components/responses/429TooManyRequests"
        "500":
          description: Something went wrong within the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "503":
          description: API is unable to reach the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /record:
    get:
      tags:
        - Track and Trace
      summary: Fetch a list of records
      description: |
        Fetches a list of records, including lists of all updates made to the
        owner and custodian.
      operationId: list_records
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Record"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  "/record/{record_id}":
    get:
      tags:
        - Track and Trace
      summary: Fetch a particular record
      description: Fetches a single record with the given record ID.
      operationId: fetch_record
      parameters:
        - name: record_id
          in: path
          description: ID of the record to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Record"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  "/record/{record_id}/property/{property_name}":
      get:
        tags:
          - Track and Trace
        summary: Fetch a particular property
        description: |
          Fetches a single property with the given record ID and property name.
        operationId: fetch_property
        parameters:
          - name: record_id
            in: path
            description: ID of the record to fetch a property from.
            required: true
            schema:
              type: string
          - name: property_name
            in: path
            description: Name of the property to fetch.
            required: true
            schema:
              type: string
        responses:
          "200":
            description: Successful operation
            content:
              application/json:
                schema:
                  properties:
                    data:
                      $ref: "#/components/schemas/Property"
          "400":
            $ref: "#/components/responses/400BadRequest"
          "404":
            $ref: "#/components/responses/404NotFound"
          "500":
            $ref: "#/components/responses/500ServerError"
          "503":
            $ref: "#/components/responses/503ServiceUnavailable"
  /product:
    get:
      tags:
        - Product
      summary: List all products
      description: "Get a list of products"
      operationId: list_products
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  "/product/{product_id}":
    get:
      tags:
        - Product
      summary: Fetch a specific product
      description: Fetches a single product with the given product ID
      operationId: fetch_product
      parameters:
        - name: product_id
          in: path
          description: ID of the property to fetch.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

components:
  parameters:
    batch_id:
      name: batch_id
      in: path
      required: true
      description: Batch id
      schema:
        type: string
    wait:
      name: wait
      in: query
      description: A time in seconds to wait for commit
      schema:
        type: integer
  responses:
    400BadRequest:
      description: Request was malformed
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/Error"
    404NotFound:
      description: Address or id did not match any resource
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/Error"
    429TooManyRequests:
      description: Too many requests have been made to process batches
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/Error"
    500ServerError:
      description: Something went wrong within the validator
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/Error"
    503ServiceUnavailable:
      description: API is unable to reach the validator
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Link:
      type: string
      example: https://api.grid.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd
    Error:
      properties:
        code:
          type: integer
          example: 34
        title:
          type: string
          example: No Batches Submitted
        message:
          type: string
          example: >
            The protobuf BatchList you submitted was empty and contained no
            Batches. You must submit at least one Batch.
    BatchStatuses:
      type: array
      items:
        properties:
          id:
            type: string
            example: 89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c
          status:
            type: string
            example: INVALID
            enum:
              - COMMITTED
              - INVALID
              - PENDING
              - UNKNOWN
          invalid_transactions:
            type: array
            items:
              properties:
                id:
                  type: string
                  example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
                message:
                  type: string
                  example: Verb is \"inc\" but name \"foo\" not in state
                extended_data:
                  type: string
                  format: byte
                  example: ZXJyb3IgZGF0YQ==
    TransactionHeader:
      properties:
        batcher_public_key:
          type: string
          example: 02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758
        dependencies:
          type: array
          items:
            type: string
            example: 1baee350bdb60bcee60e3d325d43283cf830b4c23b2cb17d3bb43935bd7af3761c2bee79847c72a9e396a9ae58f48add4e43f94eb83f84442c6085c1dd5d4dbe
        family_name:
          type: string
          example: intkey
        family_version:
          type: string
          example: "1.0"
        inputs:
          type: array
          items:
            type: string
            example: 1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c
        nonce:
          type: string
          example: QAApS4L
        outputs:
          type: array
          items:
            type: string
            example: 1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c
        payload_sha512:
          type: string
          example: fb6135ef73f4fe77367f9384b3bbbb158f4b8603c9d612157108e5c271868fce2242ee4abd7a29397ba63780c3ccab13783dfd4d9f0167beda03cdb0e37b87f4
        signer_public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
    Transaction:
      properties:
        header:
          $ref: "#/components/schemas/TransactionHeader"
        header_signature:
          type: string
          example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
        payload:
          type: string
          format: binary
    BatchHeader:
      properties:
        signer_public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
        transaction_ids:
          type: array
          items:
            type: string
            example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
    Batch:
      properties:
        header:
          $ref: "#/components/schemas/BatchHeader"
        header_signature:
          type: string
          example: 89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
    BatchList:
      properties:
        batches:
          type: array
          items:
            $ref: "#/components/schemas/Batch"
    Schema:
      properties:
        name:
          type: string
          example: Lightbulb
        description:
          type: string
          example: Example Lightbulb schema
        owner:
          type: string
          example: philips001
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
    PropertyDefinition:
      properties:
        name:
          type: string
          example: size
        data_type:
          $ref: "#/components/schemas/DataTypeEnum"
        description:
          type: string
          example: Lightbulb radius, in millimeters
        required:
          type: boolean
          example: true
        number_exponent:
          type: integer
          format: int32
          example: -6
        enum_options:
          type: array
          items:
            type: string
          example:
            - filament
            - CF
            - LED
        struct_properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
    DataTypeEnum:
      description: Data type of a PropertyDefinition
      type: string
      enum:
        - BYTES
        - BOOLEAN
        - NUMBER
        - STRING
        - ENUM
        - STRUCT
        - LOCATION
    Agent:
      properties:
        public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
        org_id:
          type: string
          example: 03c360a46457a284793153e09840c322bee1dcc34445d7d49e19e60abd18fd0758
        active:
          type: boolean
          example: "true"
        roles:
          type: array
          items:
            type: string
            example: admin
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
    Organization:
      type: object
      properties:
        id:
          type: string
          example: philips001
        name:
          type: string
          example: Philips
        address:
          type: string
          example: Amstelplein 2 1096 BC Amsterdam The Netherlands
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
    Metadata:
      type: object
      properties:
        key:
          type: string
          example: industry
        value:
          type: string
          example: eletronics
    AssociatedAgent:
      type: object
      properties:
        agent_id:
          type: string
          example: 02fb5b3a093e20e420ecf9c5839215e74c97f49eb51889069eb87bc6f62ceca8dd
        timestamp:
          type: integer
          example: 1557949075
    LatLong:
      type: object
      properties:
        latitude:
          type: integer
          example: 46786299
        longitude:
          type: integer
          example: -92051336
    Record:
      type: object
      properties:
        record_id:
          type: string
          example: 7h15-45537-15-br173
        schema:
          type: string
          example: Lightbulb
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        custodian:
          type: string
          example: 02fb5b3a093e20e420ecf9c5839215e74c97f49eb51889069eb87bc6f62ceca8dd
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Property"
        proposals:
          type: array
          items:
            $ref: "#/components/schemas/Proposal"
        owner_updates:
          type: array
          items:
            $ref: "#/components/schemas/AssociatedAgent"
        custodian_updates:
          type: array
          items:
            $ref: "#/components/schemas/AssociatedAgent"
        final:
          type: boolean
    ReportedValue:
      type: object
      properties:
        timestamp:
          type: integer
          example: 1557949075
        value:
          oneOf:
            - type: string
            - type: boolean
            - type: number
              format: int64
            - type: integer
              format: int32
            - $ref: '#/components/schemas/StructValue'
            - $ref: '#/components/schemas/LatLong'
            - $ref: '#/components/schemas/BytesValue'
          example: "AQIDBA=="
        reporter:
          type: object
          properties:
            metadata:
              type: object
              example: {agent_name: "Smith"}
            public_key:
              type: string
              example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
    Property:
      type: object
      properties:
        name:
          type: string
          example: location
        record_id:
          type: string
          example: 7h15-45537-15-br173
        data_type:
          $ref: "#/components/schemas/DataTypeEnum"
        authorized_reporters:
          type: array
          items:
            type: string
            example:
              - 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
              - 0364edd42bd9b2dea1315e2da820b569665f96e36c44b267ceeac488cfdc03bf61
        value:
            $ref: "#/components/schemas/ReportedValue"
        updates:
          type: array
          items:
            $ref: "#/components/schemas/ReportedValue"
    ProposalRoleEnum:
      type: string
      enum:
        - OWNER
        - CUSTODIAN
        - REPORTER
    ProposalStatusEnum:
      description: Status of a proposal
      type: string
      enum:
        - OPEN
        - ACCEPTED
        - REJECTED
        - CANCELED
    Proposal:
      type: object
      properties:
        receiving_agent:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        issuing_agent:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        role:
          $ref: "#/components/schemas/ProposalRoleEnum"
        properties:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/ProposalStatusEnum"
        timestamp:
          type: integer
          example: 1557949075
    StructPropertyValue:
      type: object
      properties:
        name:
          type: string
          example: location
        type:
          $ref: "#/components/schemas/DataTypeEnum"
        value:
          oneOf:
            - type: string
            - type: boolean
            - type: number
              format: int64
            - type: integer
              format: int32
            - $ref: '#/components/schemas/StructValue'
            - $ref: '#/components/schemas/LatLong'
            - $ref: '#/components/schemas/BytesValue'
          example: "AQIDBA=="
    StructValue:
      type: array
      items:
        $ref: '#/components/schemas/StructPropertyValue'
    BytesValue:
      type: string
      format: byte
      example: "AQIDBA=="
    ProductNamespaceEnum:
      description: Namespace of a product
      type: string
      enum:
        - UNSET_NAMESPACE
        - GS1
    Product:
      type: object
      properties:
        product_id:
          type: string
          example: 00122765988220
        product_address:
          type: string
          example: 621dee0201000000000000000000000000000000000000000000000012276598822000
        product_namespace:
          $ref: "#/components/schemas/ProductNamespaceEnum"
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        properties:
          $ref: "#/components/schemas/StructPropertyValue"
